--[========================================================================[

    ZLNL: A minimalist RPG game engine made in nelua for c99
    ________________________________________________________________________

    Copyright (c) 2020      Nelson "darltrash" Lopez

    This software is provided 'as-is', without any express or implied warranty. 
    In no event will the authors be held liable for any damages arising from the use of this software.

    Permission is granted to anyone to use this software for any purpose, 
    including commercial applications, and to alter it and redistribute it freely, 
    subject to the following restrictions:

    1. The origin of this software must not be misrepresented; 
        you must not claim that you wrote the original software. 
        If you use this software in a product, an acknowledgment 
        in the product documentation would be appreciated but is not required.

    2. Altered source versions must be plainly marked as such, 
        and must not be misrepresented as being the original software.

    3. This notice may not be removed or altered from any source distribution.

]========================================================================]--

##[[
    function embedFile(file) -- Sorry for trying to clone zig in here lmao
        assert(file, "ERROR IN EMBEDFILE, NO FILE SPECIFIED!")
        local outfile = io.open(file, rb)
        local out = outfile:read("*all")
        outfile:close()
        return out
    end
]]

require "libs.sdl2"
require "libs.tinyfx"
require "libs.math_extra"
require "iterators"
require "os"

math.randomseed((@integer)(os.time()))
defer SDL_Quit() end

local window = SDL_CreateWindow("sdl2", 0, 0, 640, 420, SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE)
defer SDL_DestroyWindow(window) end;

SDL_GL_SetAttribute(SDL_GL_RED_SIZE,    8);
SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE,  8);
SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE,   8);
SDL_GL_SetAttribute(SDL_GL_ALPHA_SIZE,  0);
SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 16);

SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_ES);
SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 1);
SDL_GL_SetAttribute(SDL_GL_CONTEXT_FLAGS, SDL_GL_CONTEXT_DEBUG_FLAG);

local context = SDL_GL_CreateContext(window);
local g_width: cint = 0
local g_height: cint = 0

SDL_GL_GetDrawableSize(window, &g_width, &g_height)
SDL_GL_MakeCurrent(window, context);
SDL_GL_SetSwapInterval(1);

tfx_set_platform_data({
    use_gles = true;
    context_version = 31;
    gl_get_proc_address = SDL_GL_GetProcAddress;
});

tfx_reset((@uint16)(g_width), (@uint16)(g_height), 
    tfx_reset_flags.NONE | tfx_reset_flags.DEBUG_OVERLAY | tfx_reset_flags.DEBUG_OVERLAY_STATS
    | tfx_reset_flags.REPORT_GPU_TIMINGS
);
defer tfx_shutdown() end

local back = 0;
tfx_view_set_clear_color(back, 0x16161bff);
tfx_view_set_clear_depth(back, 1.0);
tfx_view_set_depth_test(back, tfx_depth_test.LT);
tfx_view_set_name(back, "Forward Pass");

local shader <comptime> = #[embedFile("shaders/main.glsl")]#

local attribs: [2]cstring = {"a_position", "a_texCoord"}
local program = tfx_program_new(shader, shader, &attribs, #attribs);

-- Square
local verts: []float32 = {
--  X    Y    Z         U    V
    0.0, 1.0, 0.0,      0.0, 1.0,
    1.0, 0.0, 0.0,      1.0, 0.0,
    0.0, 0.0, 0.0,      0.0, 0.0, 
    0.0, 1.0, 0.0,      0.0, 1.0,
    1.0, 1.0, 0.0,      1.0, 1.0,
    1.0, 0.0, 0.0,      1.0, 0.0
}

local fmt = tfx_vertex_format_start();
tfx_vertex_format_add(&fmt, 0, 3, false, tfx_component_type.FLOAT);
tfx_vertex_format_add(&fmt, 1, 2, false, tfx_component_type.FLOAT);
tfx_vertex_format_end(&fmt);
local vbo = tfx_buffer_new(&verts, (#verts*#float32), &fmt, tfx_buffer_flags.NONE);

local projection = mat4.from_ortho(0, g_width, 0, g_height, -10, 10)
local projectionUniform = tfx_uniform_new("projection", tfx_uniform_type.MAT4, 1)
tfx_set_uniform(&projectionUniform, &projection.data, 1);

local model = mat4.new():scale(vec3{x=30, y=30, z=1}):translate(vec3{x=200, y=0, z=5})
local modelUniform = tfx_uniform_new("model", tfx_uniform_type.MAT4, 1)
tfx_set_uniform(&modelUniform, &model.data, 1);

local colorUniform = tfx_uniform_new("mainColor", tfx_uniform_type.VEC4, 1)
local color: [4]float32 = {1, 1, 1, 1}
tfx_set_uniform(&colorUniform, &color, 1)

local lightUniform = tfx_uniform_new("light", tfx_uniform_type.VEC4, 1)
local light: [4]float32 = {1, 79/255, 196/255, 1} -- pink :)
tfx_set_uniform(&lightUniform, &light, 1)

local darkUniform = tfx_uniform_new("dark", tfx_uniform_type.VEC4, 1)
local dark: [4]float32 = {22/255, 22/255, 27/255, 1} -- eigengrau B)
tfx_set_uniform(&darkUniform, &dark, 1)

local intensityUniform = tfx_uniform_new("intensity", tfx_uniform_type.FLOAT, 1)
local intensity: float32 = 1
tfx_set_uniform(&intensityUniform, &intensity, 1)

local amountUniform = tfx_uniform_new("amount", tfx_uniform_type.FLOAT, 1)
local amount: float32 = 1
tfx_set_uniform(&amountUniform, &amount, 1)

local entity = @record {
    x: number, y: number, vx: number, vy: number
}

local entitylist: [101]entity

##for x=0, 100 do -- Comptime bullshit, baby!
    entitylist[#[x]#] = entity{
        x  = math.random(0, g_width),
        y  = math.random(0, g_height),
        vx = math.random(-100, 100)/900,
        vy = math.random(-100, 100)/900
    }
##end

local now: uint64 = SDL_GetPerformanceCounter()
local last: uint64 = 0
local delta: float64 = 0

local running = true
while running do
    last = now
    now = SDL_GetPerformanceCounter()
    delta = (@float64)((now - last)*1000 / (@cdouble)(SDL_GetPerformanceFrequency()));

    local event: SDL_Event
    while (SDL_PollEvent(&event) == 1) do
        switch event.type
        case SDL_QUIT then
            running = false
        case SDL_WINDOWEVENT then
            if event.window.event == SDL_WINDOWEVENT_RESIZED then
                SDL_GL_GetDrawableSize( window, &g_width, &g_height )
                tfx_reset((@uint16)(g_width), (@uint16)(g_height), 
                    tfx_reset_flags.NONE | tfx_reset_flags.DEBUG_OVERLAY | tfx_reset_flags.DEBUG_OVERLAY_STATS
                    | tfx_reset_flags.REPORT_GPU_TIMINGS
                );
                projection = mat4.from_ortho(0, g_width, 0, g_height, -10, 10)
                tfx_set_uniform(&projectionUniform, &projection.data, 1);
            end
        end
    end

    tfx_view_set_clear_color(back, 0x16161bff);
    tfx_view_set_clear_depth(back, 1.0);
    tfx_view_set_name(back, "Forward Pass");

    for z, item in mipairs(entitylist) do
        local gray = ((z/#entitylist) * 1)

        item.x = item.x + item.vx * delta * gray
        item.y = item.y + item.vy * delta * gray

        if (item.x < 0) or ((item.x+30) > g_width) then
            item.vx = -item.vx
        end

        if (item.y < 0) or ((item.y+30) > g_height) then
            item.vy = -item.vy
        end
        
        model:identity()
        model = model:scale(vec3{x=30, y=30, z=1}):translate(vec3{x=item.x, y=item.y, z=z/#entitylist})
        tfx_set_uniform(&modelUniform, &model.data, 1);

        color = {gray, gray, gray, 1}

        tfx_set_vertices(&vbo, 6);
        tfx_set_state(0
            | TFX_STATE_RGB_WRITE
            | TFX_STATE_ALPHA_WRITE
            | TFX_STATE_BLEND_ALPHA
        );
        
        tfx_set_uniform(&colorUniform, &color, 1)
        tfx_submit(back, program, false);
    end

    tfx_frame();
    SDL_GL_SwapWindow(window);
end